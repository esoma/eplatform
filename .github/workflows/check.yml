
name: check

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12']
        arch: [x64]

    steps:
    - uses: actions/checkout@v2

    - name: Initialize Submodules
      run: |
        git submodule update --init --recursive

    - name: Install Mesa Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install xvfb libglu1-mesa-dev freeglut3-dev mesa-common-dev

    - name: Install Mesa Windows
      if: runner.os == 'Windows'
      uses: ssciwr/setup-mesa-dist-win@v2

    - name: Install ninja
      uses: seanmiddleditch/gha-setup-ninja@v5

    - name: Setup MSVC
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}

    - name: Set up Python ${{ matrix.python-version }}-${{ matrix.arch }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch }}

    - name: Install Poetry
      uses: snok/install-poetry@v1.3.2

    - name: Install
      run: |
        poetry install
      env:
        EPLATFORM_BUILD_WITH_COVERAGE: ${{ matrix.os == 'windows-latest' && '0' || '1' }}

    - name: Test Window
      if: runner.os == 'Windows'
      run: |
        poetry run python .github/info.py
        poetry run pytest --cov=eplatform --cov-report=xml
      env:
        LIBGL_ALWAYS_SOFTWARE: "true"

    - name: Test Mac
      if: runner.os == 'macOS'
      run: |
        export DYLD_LIBRARY_PATH=$PWD/vendor/SDL:$LD_LIBRARY_PATH
        poetry run python .github/info.py
        poetry run pytest --cov=eplatform --cov-report=xml
      env:
        LIBGL_ALWAYS_SOFTWARE: "true"

    - name: Test Linux
      if: runner.os == 'Linux'
      run: |
        export LD_LIBRARY_PATH=$PWD/vendor/SDL:$LD_LIBRARY_PATH
        xvfb-run -a poetry run python .github/info.py
        xvfb-run -a poetry run pytest --cov=eplatform --cov-report=xml
      env:
        LIBGL_ALWAYS_SOFTWARE: "true"

    - name: Codecov
      uses: codecov/codecov-action@v5
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


  static-analysis:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.12
        architecture: x64

    - name: Upgrade pip & setuptools
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools

    - name: Install Pre-Commit
      run: |
        python -m pip install pre-commit

    - name: Static Analysis
      run: |
        python -m pre_commit run --all-files

